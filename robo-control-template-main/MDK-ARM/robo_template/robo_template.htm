<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [robo_template\robo_template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image robo_template\robo_template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Jul 28 02:35:47 2023
<BR><P>
<H3>Maximum Stack Usage =       2464 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Scheduler::getSysTimeUs() &rArr; micros()
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[124]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[19c]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19c]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1f5]">Error::Error_Handler()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">Error::Error_Handler()</a><BR>
 <LI><a href="#[1bc]">UART_EndTxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bc]">UART_EndTxTransfer</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(.text.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from stm32f4xx_it.o(.text.CAN1_RX1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(.text.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f4xx_it.o(.text.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f4xx_it.o(.text.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f4xx_it.o(.text.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from stm32f4xx_it.o(.text.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[63]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[61]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[62]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from main.o(.text.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from main.o(.text.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from main.o(.text.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b3]">_GLOBAL__sub_I_main.cpp</a> from main.o(.text._GLOBAL__sub_I_main.cpp) referenced from main.o(.init_array)
 <LI><a href="#[65]">MahonyAHRS::init()</a> from mahonyahrs.o(.text._ZN10MahonyAHRS4initEv) referenced from mahonyahrs.o(.rodata._ZTV10MahonyAHRS)
 <LI><a href="#[66]">MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)</a> from mahonyahrs.o(.text._ZN10MahonyAHRS6updateE7Vector3IfES1_) referenced from mahonyahrs.o(.rodata._ZTV10MahonyAHRS)
 <LI><a href="#[6a]">CANSendTask::init()</a> from cansendtask.o(.text._ZN11CANSendTask4initEv) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[6b]">CANSendTask::uninit()</a> from cansendtask.o(.text._ZN11CANSendTask6uninitEv) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[69]">CANSendTask::update(unsigned int)</a> from cansendtask.o(.text._ZN11CANSendTask6updateEj) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[68]">CANSendTask::~CANSendTask__deallocating()</a> from cansendtask.o(.text._ZN11CANSendTaskD0Ev) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[6c]">AsyncFuncBase::operator()()</a> from robot.o(.text._ZN13AsyncFuncBaseclEv) referenced from robot.o(.rodata._ZTV13AsyncFuncBase)
 <LI><a href="#[6e]">Motor_Backend::publishMeasurement()</a> from motor_backend.o(.text._ZN13Motor_Backend18publishMeasurementEv) referenced from motor_backend.o(.rodata._ZTV13Motor_Backend)
 <LI><a href="#[6e]">Motor_Backend::publishMeasurement()</a> from motor_backend.o(.text._ZN13Motor_Backend18publishMeasurementEv) referenced from motor_dm.o(.rodata._ZTV8Motor_DM)
 <LI><a href="#[6e]">Motor_Backend::publishMeasurement()</a> from motor_backend.o(.text._ZN13Motor_Backend18publishMeasurementEv) referenced from motor_rm.o(.rodata._ZTV8Motor_RM)
 <LI><a href="#[71]">LEDControlTask::init()</a> from ledcontroltask.o(.text._ZN14LEDControlTask4initEv) referenced from ledcontroltask.o(.rodata._ZTV14LEDControlTask)
 <LI><a href="#[72]">LEDControlTask::uninit()</a> from ledcontroltask.o(.text._ZN14LEDControlTask6uninitEv) referenced from ledcontroltask.o(.rodata._ZTV14LEDControlTask)
 <LI><a href="#[70]">LEDControlTask::update(unsigned int)</a> from ledcontroltask.o(.text._ZN14LEDControlTask6updateEj) referenced from ledcontroltask.o(.rodata._ZTV14LEDControlTask)
 <LI><a href="#[6f]">LEDControlTask::~LEDControlTask__deallocating()</a> from ledcontroltask.o(.text._ZN14LEDControlTaskD0Ev) referenced from ledcontroltask.o(.rodata._ZTV14LEDControlTask)
 <LI><a href="#[75]">PIDControlTask::init()</a> from pidcontroltask.o(.text._ZN14PIDControlTask4initEv) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[76]">PIDControlTask::uninit()</a> from pidcontroltask.o(.text._ZN14PIDControlTask6uninitEv) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[74]">PIDControlTask::update(unsigned int)</a> from pidcontroltask.o(.text._ZN14PIDControlTask6updateEj) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[73]">PIDControlTask::~PIDControlTask__deallocating()</a> from pidcontroltask.o(.text._ZN14PIDControlTaskD0Ev) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[79]">SongPlayerTask::init()</a> from songplayertask.o(.text._ZN14SongPlayerTask4initEv) referenced from songplayertask.o(.rodata._ZTV14SongPlayerTask)
 <LI><a href="#[7a]">SongPlayerTask::uninit()</a> from songplayertask.o(.text._ZN14SongPlayerTask6uninitEv) referenced from songplayertask.o(.rodata._ZTV14SongPlayerTask)
 <LI><a href="#[78]">SongPlayerTask::update(unsigned int)</a> from songplayertask.o(.text._ZN14SongPlayerTask6updateEj) referenced from songplayertask.o(.rodata._ZTV14SongPlayerTask)
 <LI><a href="#[77]">SongPlayerTask::~SongPlayerTask__deallocating()</a> from songplayertask.o(.text._ZN14SongPlayerTaskD0Ev) referenced from songplayertask.o(.rodata._ZTV14SongPlayerTask)
 <LI><a href="#[7d]">Arm_ControlTask::init()</a> from armcontroltask.o(.text._ZN15Arm_ControlTask4initEv) referenced from armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
 <LI><a href="#[7e]">Arm_ControlTask::uninit()</a> from armcontroltask.o(.text._ZN15Arm_ControlTask6uninitEv) referenced from armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
 <LI><a href="#[7c]">Arm_ControlTask::update(unsigned int)</a> from armcontroltask.o(.text._ZN15Arm_ControlTask6updateEj) referenced from armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
 <LI><a href="#[7b]">Arm_ControlTask::~Arm_ControlTask__deallocating()</a> from armcontroltask.o(.text._ZN15Arm_ControlTaskD0Ev) referenced from armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
 <LI><a href="#[80]">RCProtocol_DBUS::processByte(unsigned char const volatile*)</a> from rcprotocol_dbus.o(.text._ZN15RCProtocol_DBUS11processByteEPVKh) referenced from rcprotocol_dbus.o(.rodata._ZTV15RCProtocol_DBUS)
 <LI><a href="#[7f]">RCProtocol_DBUS::init()</a> from rcprotocol_dbus.o(.text._ZN15RCProtocol_DBUS4initEv) referenced from rcprotocol_dbus.o(.rodata._ZTV15RCProtocol_DBUS)
 <LI><a href="#[81]">RCProtocol_DBUS::uninit()</a> from rcprotocol_dbus.o(.text._ZN15RCProtocol_DBUS6uninitEv) referenced from rcprotocol_dbus.o(.rodata._ZTV15RCProtocol_DBUS)
 <LI><a href="#[84]">PID_GyrotempTask::init()</a> from attitudesolutiontask.o(.text._ZN16PID_GyrotempTask4initEv) referenced from attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
 <LI><a href="#[85]">PID_GyrotempTask::uninit()</a> from attitudesolutiontask.o(.text._ZN16PID_GyrotempTask6uninitEv) referenced from attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
 <LI><a href="#[83]">PID_GyrotempTask::update(unsigned int)</a> from attitudesolutiontask.o(.text._ZN16PID_GyrotempTask6updateEj) referenced from attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
 <LI><a href="#[82]">PID_GyrotempTask::~PID_GyrotempTask__deallocating()</a> from attitudesolutiontask.o(.text._ZN16PID_GyrotempTaskD0Ev) referenced from attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
 <LI><a href="#[86]">Transmit_DMAFunc::operator()()</a> from robot.o(.text._ZN16Transmit_DMAFuncclEv) referenced from robot.o(.rodata._ZTV16Transmit_DMAFunc)
 <LI><a href="#[89]">GimbalControlTask::init()</a> from gimbalcontroltask.o(.text._ZN17GimbalControlTask4initEv) referenced from gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
 <LI><a href="#[8a]">GimbalControlTask::uninit()</a> from gimbalcontroltask.o(.text._ZN17GimbalControlTask6uninitEv) referenced from gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
 <LI><a href="#[88]">GimbalControlTask::update(unsigned int)</a> from gimbalcontroltask.o(.text._ZN17GimbalControlTask6updateEj) referenced from gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
 <LI><a href="#[87]">GimbalControlTask::~GimbalControlTask__deallocating()</a> from gimbalcontroltask.o(.text._ZN17GimbalControlTaskD0Ev) referenced from gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
 <LI><a href="#[8d]">RefereeSystemTask::init()</a> from refereesystemtask.o(.text._ZN17RefereeSystemTask4initEv) referenced from refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
 <LI><a href="#[8e]">RefereeSystemTask::uninit()</a> from refereesystemtask.o(.text._ZN17RefereeSystemTask6uninitEv) referenced from refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
 <LI><a href="#[8c]">RefereeSystemTask::update(unsigned int)</a> from refereesystemtask.o(.text._ZN17RefereeSystemTask6updateEj) referenced from refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
 <LI><a href="#[8b]">RefereeSystemTask::~RefereeSystemTask__deallocating()</a> from refereesystemtask.o(.text._ZN17RefereeSystemTaskD0Ev) referenced from refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
 <LI><a href="#[91]">RemoteControlTask::init()</a> from remotecontroltask.o(.text._ZN17RemoteControlTask4initEv) referenced from remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
 <LI><a href="#[92]">RemoteControlTask::uninit()</a> from remotecontroltask.o(.text._ZN17RemoteControlTask6uninitEv) referenced from remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
 <LI><a href="#[90]">RemoteControlTask::update(unsigned int)</a> from remotecontroltask.o(.text._ZN17RemoteControlTask6updateEj) referenced from remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
 <LI><a href="#[8f]">RemoteControlTask::~RemoteControlTask__deallocating()</a> from remotecontroltask.o(.text._ZN17RemoteControlTaskD0Ev) referenced from remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
 <LI><a href="#[95]">ChassisControlTask::init()</a> from chassiscontroltask.o(.text._ZN18ChassisControlTask4initEv) referenced from chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
 <LI><a href="#[96]">ChassisControlTask::uninit()</a> from chassiscontroltask.o(.text._ZN18ChassisControlTask6uninitEv) referenced from chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
 <LI><a href="#[94]">ChassisControlTask::update(unsigned int)</a> from chassiscontroltask.o(.text._ZN18ChassisControlTask6updateEj) referenced from chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
 <LI><a href="#[93]">ChassisControlTask::~ChassisControlTask__deallocating()</a> from chassiscontroltask.o(.text._ZN18ChassisControlTaskD0Ev) referenced from chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
 <LI><a href="#[99]">AttitudeSolutionTask::init()</a> from attitudesolutiontask.o(.text._ZN20AttitudeSolutionTask4initEv) referenced from attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
 <LI><a href="#[9a]">AttitudeSolutionTask::uninit()</a> from attitudesolutiontask.o(.text._ZN20AttitudeSolutionTask6uninitEv) referenced from attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
 <LI><a href="#[98]">AttitudeSolutionTask::update(unsigned int)</a> from attitudesolutiontask.o(.text._ZN20AttitudeSolutionTask6updateEj) referenced from attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
 <LI><a href="#[97]">AttitudeSolutionTask::~AttitudeSolutionTask__deallocating()</a> from attitudesolutiontask.o(.text._ZN20AttitudeSolutionTaskD0Ev) referenced from attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
 <LI><a href="#[9e]">InertialSensor_BMI088::updateGyro()</a> from inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08810updateGyroEv) referenced from inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
 <LI><a href="#[9d]">InertialSensor_BMI088::updateAccel()</a> from inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08811updateAccelEv) referenced from inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
 <LI><a href="#[9f]">InertialSensor_BMI088::getTemperature()</a> from inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08814getTemperatureEv) referenced from inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
 <LI><a href="#[9b]">InertialSensor_BMI088::init()</a> from inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI0884initEv) referenced from inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
 <LI><a href="#[9c]">InertialSensor_BMI088::update()</a> from inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI0886updateEv) referenced from inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
 <LI><a href="#[a0]">InertialSensor_BMI088::calibGyro(unsigned int)</a> from inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI0889calibGyroEj) referenced from inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
 <LI><a href="#[a3]">Motor_DM_PSControlTask::init()</a> from motor_dm_task.o(.text._ZN22Motor_DM_PSControlTask4initEv) referenced from motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
 <LI><a href="#[a4]">Motor_DM_PSControlTask::uninit()</a> from motor_dm_task.o(.text._ZN22Motor_DM_PSControlTask6uninitEv) referenced from motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
 <LI><a href="#[a2]">Motor_DM_PSControlTask::update(unsigned int)</a> from motor_dm_task.o(.text._ZN22Motor_DM_PSControlTask6updateEj) referenced from motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
 <LI><a href="#[a1]">Motor_DM_PSControlTask::~Motor_DM_PSControlTask__deallocating()</a> from motor_dm_task.o(.text._ZN22Motor_DM_PSControlTaskD0Ev) referenced from motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
 <LI><a href="#[a7]">Motor_RM_PIDControlTask::init()</a> from motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask4initEv) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[a8]">Motor_RM_PIDControlTask::uninit()</a> from motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask6uninitEv) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[a6]">Motor_RM_PIDControlTask::update(unsigned int)</a> from motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask6updateEj) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[a5]">Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating()</a> from motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTaskD0Ev) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[b2]">cmt::SimpleAdd&lang;float&rang;::operator()(float, float)</a> from commonmath.o(.text._ZN3cmt9SimpleAddIfEclEff) referenced from commonmath.o(.rodata._ZTVN3cmt9SimpleAddIfEE)
 <LI><a href="#[64]">Robot::~Robot__sub_object()</a> from main.o(.text._ZN5RobotD2Ev) referenced 2 times from main.o(.text.__cxx_global_var_init)
 <LI><a href="#[ac]">Motor_DM::updateMeasurement()</a> from motor_dm.o(.text._ZN8Motor_DM17updateMeasurementEv) referenced from motor_dm.o(.rodata._ZTV8Motor_DM)
 <LI><a href="#[a9]">Motor_DM::init()</a> from motor_dm.o(.text._ZN8Motor_DM4initEv) referenced from motor_dm.o(.rodata._ZTV8Motor_DM)
 <LI><a href="#[ab]">Motor_DM::uninit()</a> from motor_dm.o(.text._ZN8Motor_DM6uninitEv) referenced from motor_dm.o(.rodata._ZTV8Motor_DM)
 <LI><a href="#[aa]">Motor_DM::update(unsigned int)</a> from motor_dm.o(.text._ZN8Motor_DM6updateEj) referenced from motor_dm.o(.rodata._ZTV8Motor_DM)
 <LI><a href="#[b0]">Motor_RM::updateMeasurement()</a> from motor_rm.o(.text._ZN8Motor_RM17updateMeasurementEv) referenced from motor_rm.o(.rodata._ZTV8Motor_RM)
 <LI><a href="#[ad]">Motor_RM::init()</a> from motor_rm.o(.text._ZN8Motor_RM4initEv) referenced from motor_rm.o(.rodata._ZTV8Motor_RM)
 <LI><a href="#[af]">Motor_RM::uninit()</a> from motor_rm.o(.text._ZN8Motor_RM6uninitEv) referenced from motor_rm.o(.rodata._ZTV8Motor_RM)
 <LI><a href="#[ae]">Motor_RM::update(unsigned int)</a> from motor_rm.o(.text._ZN8Motor_RM6updateEj) referenced from motor_rm.o(.rodata._ZTV8Motor_RM)
 <LI><a href="#[b1]">Task_Base::~Task_Base__deallocating()</a> from cansendtask.o(.text._ZN9Task_BaseD0Ev) referenced from cansendtask.o(.rodata._ZTV9Task_Base)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from ledcontroltask.o(.rodata._ZTV14LEDControlTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from songplayertask.o(.rodata._ZTV14SongPlayerTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[67]">Task_Base::~Task_Base__sub_object()</a> from pidcontroltask.o(.text._ZN9Task_BaseD2Ev) referenced from cansendtask.o(.rodata._ZTV9Task_Base)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 4 times from motor_backend.o(.rodata._ZTV13Motor_Backend)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 3 times from rcprotocol_backend.o(.rodata._ZTV18RCProtocol_Backend)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 6 times from inertialsensor_backend.o(.rodata._ZTV22InertialSensor_Backend)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 2 times from mahonyahrs.o(.rodata._ZTV4AHRS)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 3 times from cansendtask.o(.rodata._ZTV9Task_Base)
 <LI><a href="#[5c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[5f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[5e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5d]">_sputc</a> from _sputc.o(.text) referenced from vsprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2a9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2aa]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b8]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b9]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[f9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bb]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[bd]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[bf]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c0]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2ac]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[c3]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c5]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c6]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c7]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[c9]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[cb]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[cd]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ce]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[cf]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[d1]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2ad]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[d3]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d5]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[d7]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[d9]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2ae]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[ea]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[db]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[dd]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2af]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2b0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[df]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2b1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2b2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2b3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2b4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2b5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2b6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2b7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2b8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2b9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2ba]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2be]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[e5]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2c3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2c4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2c5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2c6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2c7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2c8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2c9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2ca]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e7]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e9]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2cb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[eb]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Robot::init() &rArr; Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int) &rArr; Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2cc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[125]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ee]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2cd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2ce]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...)
</UL>

<P><STRONG><a name="[c4]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[f7]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[fa]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::Helper__sub_object()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::getRobotRefereeStatus_t()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::pushToBuffer(unsigned short, unsigned short)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readAddress(unsigned int, unsigned int*, unsigned short)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::LEDControlTask__sub_object(Robot&, unsigned int)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::SongPlayerTask__sub_object(Robot&, unsigned short*, unsigned short, unsigned int)
</UL>

<P><STRONG><a name="[fc]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2cf]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getScheduler()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...)
</UL>

<P><STRONG><a name="[2d3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[fe]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[101]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[102]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[104]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[106]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[107]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[f4]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f5]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[105]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[f6]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ba]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[f3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[5d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[cc]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[10b]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[c8]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[d0]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[10c]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ca]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[d2]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[bc]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[10d]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[f1]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[ff]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[10f]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2d9]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[111]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[de]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[113]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2df]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[119]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[11c]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[11d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d4]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[d6]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[11e]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[d8]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[da]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[11f]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[109]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[e6]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[10e]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2e0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[120]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[e0]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[110]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2e5]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[115]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ed]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[122]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[121]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[112]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[126]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[127]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[292]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[128]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[151]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(.text.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[152]"></a>FLASH_FlushCaches</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[12c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_ADC_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[281]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::init(__CAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[282]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::send(CAN_TxHeaderTypeDef*, unsigned char*)
</UL>

<P><STRONG><a name="[280]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::init(__CAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[13f]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[129]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_CAN_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, can.o(.text.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, main.o(.text.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getCAN2DevicePointer()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getCAN1DevicePointer()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_CAN_Start</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::init(__CAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[133]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_DMA_Abort</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[14c]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[14e]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::calibGyro(unsigned int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::init()
</UL>

<P><STRONG><a name="[14f]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_eraseAddress(unsigned int, unsigned short)
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeAddress(unsigned int, unsigned int*, unsigned short)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_eraseAddress(unsigned int, unsigned short)
</UL>

<P><STRONG><a name="[153]"></a>HAL_FLASH_Program</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeAddress(unsigned int, unsigned int*, unsigned short)
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeAddress(unsigned int, unsigned int*, unsigned short)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_eraseAddress(unsigned int, unsigned short)
</UL>

<P><STRONG><a name="[158]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 90 bytes, Stack size 2432 bytes, main.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2448<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::getSysTimeUs()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getAttitudeSolutionTaskPointer()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getScheduler()
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[18f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::setLED(unsigned char, unsigned char, unsigned char)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::writeSingleRegAccel(unsigned char, unsigned char)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::writeSingleRegGyro(unsigned char, unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readSingleRegAccel(unsigned char)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readSingleRegGyro(unsigned char)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readMultiRegAccel(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readMultiRegGyro(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[12d]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
</UL>

<P><STRONG><a name="[15c]"></a>HAL_I2C_Init</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[15f]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>HAL_InitTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[162]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::init()
</UL>

<P><STRONG><a name="[142]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::init()
</UL>

<P><STRONG><a name="[160]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[169]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[16b]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[15e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16c]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[16e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 840 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[16f]"></a>HAL_SPI_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[170]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readWriteByte(unsigned char)
</UL>

<P><STRONG><a name="[163]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[17f]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[26c]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[177]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[17d]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; RefereeSystemTask::getRobotRefereeStatus_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[182]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[18a]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[18b]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[17e]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 238 bytes, Stack size 336 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; RefereeSystemTask::getRobotRefereeStatus_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getAttitudeSolutionTaskPointer()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getChassisControlTaskPointer()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getRefereeSystemTaskPointer()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getLEDControlTaskPointer()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getArmControlTaskPointer()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getRemoteControlTask()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::getPIDGyrotempTaskPointer()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::get_can_tx_data()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::getRobotRefereeStatus_t()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[19e]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[197]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_UART_MspInit</STRONG> (Thumb, 736 bytes, Stack size 64 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_DMAFunc::operator()()
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[1be]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>MX_ADC1_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, adc.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>MX_ADC3_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, adc.o(.text.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>MX_CAN1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(.text.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>MX_CAN2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(.text.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>MX_DMA_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>MX_GPIO_Init</STRONG> (Thumb, 554 bytes, Stack size 64 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>MX_I2C2_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>MX_I2C3_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>MX_SPI1_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>MX_SPI2_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>MX_TIM10_Init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, tim.o(.text.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM10_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>MX_TIM1_Init</STRONG> (Thumb, 268 bytes, Stack size 96 bytes, tim.o(.text.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>MX_TIM2_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>MX_TIM4_Init</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>MX_TIM5_Init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>MX_TIM8_Init</STRONG> (Thumb, 294 bytes, Stack size 96 bytes, tim.o(.text.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usart.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; RefereeSystemTask::getRobotRefereeStatus_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; RefereeSystemTask::getRobotRefereeStatus_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; RefereeSystemTask::getRobotRefereeStatus_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; RefereeSystemTask::getRobotRefereeStatus_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[18d]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[179]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[187]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getRefereeSystemTaskPointer()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::pushToBuffer(unsigned short, unsigned short)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, main.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; RCProtocol::processByte(unsigned char const volatile*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getRCProtocolPointer()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::processByte(unsigned char const volatile*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(.text.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::getRefereeSystemTaskPointer()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::pushToBuffer(unsigned short, unsigned short)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>isOutOfClock(unsigned int, unsigned int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, scheduler_common.o(.text._Z12isOutOfClockjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isOutOfClock(unsigned int, unsigned int) &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[244]"></a>u8Arry2float(unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, refereesystemtask.o(.text._Z12u8Arry2floatPh))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::parseData()
</UL>

<P><STRONG><a name="[1cb]"></a>flash_getSector(unsigned int)</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, flash.o(.text._Z15flash_getSectorj))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_eraseAddress(unsigned int, unsigned short)
</UL>

<P><STRONG><a name="[1c6]"></a>flash_readAddress(unsigned int, unsigned int*, unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(.text._Z17flash_readAddressjPjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_readAddress(unsigned int, unsigned int*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::init()
</UL>

<P><STRONG><a name="[1d0]"></a>Get_CRC8_Check_Sum(unsigned char*, unsigned int, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, refereesystem_data.o(.text._Z18Get_CRC8_Check_SumPhjh))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum(unsigned char*, unsigned int)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum(unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[1c8]"></a>SystemClock_Config()</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, main.o(.text._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ca]"></a>flash_eraseAddress(unsigned int, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, flash.o(.text._Z18flash_eraseAddressjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_eraseAddress(unsigned int, unsigned short) &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_getSector(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::calibGyro(unsigned int)
</UL>

<P><STRONG><a name="[1ce]"></a>flash_writeAddress(unsigned int, unsigned int*, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash.o(.text._Z18flash_writeAddressjPjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_writeAddress(unsigned int, unsigned int*, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::calibGyro(unsigned int)
</UL>

<P><STRONG><a name="[1d3]"></a>Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, refereesystem_data.o(.text._Z19Get_CRC16_Check_SumPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum(unsigned char*, unsigned int)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum(unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[1cf]"></a>Append_CRC8_Check_Sum(unsigned char*, unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, refereesystem_data.o(.text._Z21Append_CRC8_Check_SumPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Append_CRC8_Check_Sum(unsigned char*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum(unsigned char*, unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...)
</UL>

<P><STRONG><a name="[1d1]"></a>Verify_CRC8_Check_Sum(unsigned char*, unsigned int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, refereesystem_data.o(.text._Z21Verify_CRC8_Check_SumPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Verify_CRC8_Check_Sum(unsigned char*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum(unsigned char*, unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::parseData()
</UL>

<P><STRONG><a name="[1d2]"></a>Append_CRC16_Check_Sum(unsigned char*, unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, refereesystem_data.o(.text._Z22Append_CRC16_Check_SumPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Append_CRC16_Check_Sum(unsigned char*, unsigned int) &rArr; Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...)
</UL>

<P><STRONG><a name="[1d4]"></a>Verify_CRC16_Check_Sum(unsigned char*, unsigned int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, refereesystem_data.o(.text._Z22Verify_CRC16_Check_SumPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Verify_CRC16_Check_Sum(unsigned char*, unsigned int) &rArr; Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::parseData()
</UL>

<P><STRONG><a name="[1c5]"></a>micros()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, scheduler_common.o(.text._Z6microsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMicrosTim5()
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::getSysTimeUs()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncFuncBase::reset()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isOutOfClock(unsigned int, unsigned int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::run()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol_DBUS::processByte(unsigned char const volatile*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::updateMotorMeasurement()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::updateMotorMeasurement()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::parseData()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[65]"></a>MahonyAHRS::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mahonyahrs.o(.text._ZN10MahonyAHRS4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mahonyahrs.o(.rodata._ZTV10MahonyAHRS)
</UL>
<P><STRONG><a name="[66]"></a>MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 818 bytes, Stack size 96 bytes, mahonyahrs.o(.text._ZN10MahonyAHRS6updateE7Vector3IfES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::isZero() const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionT&lang;float&rang;::toRotationMatrix() const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::normalize()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionT&lang;float&rang;::normalize()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::update(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mahonyahrs.o(.rodata._ZTV10MahonyAHRS)
</UL>
<P><STRONG><a name="[1de]"></a>MahonyAHRS::MahonyAHRS(float, float)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mahonyahrs.o(.text._ZN10MahonyAHRSC2Eff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MahonyAHRS::MahonyAHRS(float, float) &rArr; AHRS::AHRS__sub_object() &rArr; Matrix3&lang;float&rang;::Matrix3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS__sub_object()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::AttitudeSolutionTask__sub_object(Robot&)
</UL>

<P><STRONG><a name="[2e6]"></a>MahonyAHRS::MahonyAHRS__sub_object(float, float)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mahonyahrs.o(.text._ZN10MahonyAHRSC2Eff), UNUSED)

<P><STRONG><a name="[1e3]"></a>RCProtocol::addBackend(RCProtocol_Backend*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rcprotocol.o(.text._ZN10RCProtocol10addBackendEP18RCProtocol_Backend))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::init()
</UL>

<P><STRONG><a name="[1c2]"></a>RCProtocol::processByte(unsigned char const volatile*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rcprotocol.o(.text._ZN10RCProtocol11processByteEPVKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCProtocol::processByte(unsigned char const volatile*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1e0]"></a>RCProtocol::init()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rcprotocol.o(.text._ZN10RCProtocol4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCProtocol::init() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol_DBUS::RCProtocol_DBUS__sub_object(RCProtocol&)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::addBackend(RCProtocol_Backend*)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[204]"></a>RCProtocol::isValid()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ledcontroltask.o(.text._ZN10RCProtocol7isValidEv))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[202]"></a>RCProtocol::setValid(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ledcontroltask.o(.text._ZN10RCProtocol8setValidEb))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[201]"></a>RCProtocol::getRCData()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ledcontroltask.o(.text._ZN10RCProtocol9getRCDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCProtocol::getRCData()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlTask::update(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[26e]"></a>RCProtocol::RCProtocol__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN10RCProtocolC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[274]"></a>RCProtocol::~RCProtocol__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN10RCProtocolD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::~Robot__sub_object()
</UL>

<P><STRONG><a name="[6a]"></a>CANSendTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cansendtask.o(.text._ZN11CANSendTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV11CANSendTask)
</UL>
<P><STRONG><a name="[6b]"></a>CANSendTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cansendtask.o(.text._ZN11CANSendTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV11CANSendTask)
</UL>
<P><STRONG><a name="[69]"></a>CANSendTask::update(unsigned int)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, cansendtask.o(.text._ZN11CANSendTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANSendTask::update(unsigned int) &rArr; CanDevice::send(CAN_TxHeaderTypeDef*, unsigned char*) &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::send(CAN_TxHeaderTypeDef*, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV11CANSendTask)
</UL>
<P><STRONG><a name="[1e5]"></a>CANSendTask::CANSendTask(Robot&, CanDevice*, unsigned short, unsigned int)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cansendtask.o(.text._ZN11CANSendTaskC2ER5RobotP9CanDevicetj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANSendTask::CANSendTask(Robot&, CanDevice*, unsigned short, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[2e7]"></a>CANSendTask::CANSendTask__sub_object(Robot&, CanDevice*, unsigned short, unsigned int)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cansendtask.o(.text._ZN11CANSendTaskC2ER5RobotP9CanDevicetj), UNUSED)

<P><STRONG><a name="[68]"></a>CANSendTask::~CANSendTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cansendtask.o(.text._ZN11CANSendTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANSendTask::~CANSendTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV11CANSendTask)
</UL>
<P><STRONG><a name="[1da]"></a>QuaternionT&lang;float&rang;::normalize()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mahonyahrs.o(.text._ZN11QuaternionTIfE9normalizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QuaternionT&lang;float&rang;::normalize()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt::invSqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[264]"></a>QuaternionT&lang;float&rang;::QuaternionT__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mahonyahrs.o(.text._ZN11QuaternionTIfEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS__sub_object()
</UL>

<P><STRONG><a name="[1e9]"></a>AsyncFuncBase::reset()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, robot.o(.text._ZN13AsyncFuncBase5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AsyncFuncBase::reset() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_DMAFunc::operator()()
</UL>

<P><STRONG><a name="[230]"></a>AsyncFuncBase::AsyncFuncBase__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, robot.o(.text._ZN13AsyncFuncBaseC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_DMAFunc::Transmit_DMAFunc__sub_object()
</UL>

<P><STRONG><a name="[6c]"></a>AsyncFuncBase::operator()()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, robot.o(.text._ZN13AsyncFuncBaseclEv))
<BR>[Address Reference Count : 1]<UL><LI> robot.o(.rodata._ZTV13AsyncFuncBase)
</UL>
<P><STRONG><a name="[1ed]"></a>LowPassFilter&lang;Vector3&lang;float&rang; &rang;::updateCoef()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, inertialsensor_bmi088.o(.text._ZN13LowPassFilterI7Vector3IfEE10updateCoefEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter(float, float)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1ea]"></a>LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, inertialsensor_bmi088.o(.text._ZN13LowPassFilterI7Vector3IfEE4calcEfS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;) &rArr; LowPassFilter&lang;Vector3&lang;float&rang; &rang;::update() &rArr; Vector3&lang;float&rang;::operator+(Vector3&lang;float&rang; const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::limitCoef()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::update()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::updateCoef()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt::isZero(float)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(Vector3&lang;float&rang; const&)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator*(float) const
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::updateAccel()
</UL>

<P><STRONG><a name="[1ef]"></a>LowPassFilter&lang;Vector3&lang;float&rang; &rang;::update()</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, filters.o(.text._ZN13LowPassFilterI7Vector3IfEE6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LowPassFilter&lang;Vector3&lang;float&rang; &rang;::update() &rArr; Vector3&lang;float&rang;::operator+(Vector3&lang;float&rang; const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator+(Vector3&lang;float&rang; const&) const
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator*(float) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1ee]"></a>LowPassFilter&lang;Vector3&lang;float&rang; &rang;::limitCoef()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, inertialsensor_bmi088.o(.text._ZN13LowPassFilterI7Vector3IfEE9limitCoefEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1f2]"></a>LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter(float, float)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, filters.o(.text._ZN13LowPassFilterI7Vector3IfEEC2Eff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::updateCoef()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::init()
</UL>

<P><STRONG><a name="[2e8]"></a>LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter__sub_object(float, float)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, filters.o(.text._ZN13LowPassFilterI7Vector3IfEEC2Eff), UNUSED)

<P><STRONG><a name="[1f3]"></a>LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, inertialsensor_backend.o(.text._ZN13LowPassFilterI7Vector3IfEEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_Backend::InertialSensor_Backend__sub_object(InertialSensor&)
</UL>

<P><STRONG><a name="[24c]"></a>LowPassFilter&lang;float&rang;::LowPassFilter__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chassiscontroltask.o(.text._ZN13LowPassFilterIfEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[6e]"></a>Motor_Backend::publishMeasurement()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motor_backend.o(.text._ZN13Motor_Backend18publishMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Backend::publishMeasurement()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> motor_rm.o(.rodata._ZTV8Motor_RM)
<LI> motor_dm.o(.rodata._ZTV8Motor_DM)
<LI> motor_backend.o(.rodata._ZTV13Motor_Backend)
</UL>
<P><STRONG><a name="[222]"></a>Motor_Backend::getCommonMeasurement()</STRONG> (Thumb, 40 bytes, Stack size 36 bytes, armcontroltask.o(.text._ZN13Motor_Backend20getCommonMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Motor_Backend::getCommonMeasurement()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::update(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
</UL>

<P><STRONG><a name="[279]"></a>Motor_Backend::Motor_Backend__sub_object(Motor&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motor_backend.o(.text._ZN13Motor_BackendC2ER5Motor))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
</UL>

<P><STRONG><a name="[1f4]"></a>InertialSensor::addBackend(InertialSensor_Backend*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inertialsensor.o(.text._ZN14InertialSensor10addBackendEP22InertialSensor_Backend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InertialSensor::addBackend(InertialSensor_Backend*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[22d]"></a>InertialSensor::getTemperature(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, inertialsensor.o(.text._ZN14InertialSensor14getTemperatureEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InertialSensor::getTemperature(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::update(unsigned int)
</UL>

<P><STRONG><a name="[24d]"></a>InertialSensor::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inertialsensor.o(.text._ZN14InertialSensor4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::init()
</UL>

<P><STRONG><a name="[24e]"></a>InertialSensor::update()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, inertialsensor.o(.text._ZN14InertialSensor6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InertialSensor::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::update(unsigned int)
</UL>

<P><STRONG><a name="[1f6]"></a>InertialSensor::getGyro(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, attitudesolutiontask.o(.text._ZN14InertialSensor7getGyroEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InertialSensor::getGyro(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(Vector3&lang;float&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::update(unsigned int)
</UL>

<P><STRONG><a name="[1f7]"></a>InertialSensor::getAccel(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, attitudesolutiontask.o(.text._ZN14InertialSensor8getAccelEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InertialSensor::getAccel(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(Vector3&lang;float&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::update(unsigned int)
</UL>

<P><STRONG><a name="[203]"></a>InertialSensor::isInited(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ledcontroltask.o(.text._ZN14InertialSensor8isInitedEt))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[1f8]"></a>InertialSensor::InertialSensor()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, inertialsensor.o(.text._ZN14InertialSensorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InertialSensor::InertialSensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[2e9]"></a>InertialSensor::InertialSensor__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, inertialsensor.o(.text._ZN14InertialSensorC2Ev), UNUSED)

<P><STRONG><a name="[71]"></a>LEDControlTask::init()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ledcontroltask.o(.text._ZN14LEDControlTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> ledcontroltask.o(.rodata._ZTV14LEDControlTask)
</UL>
<P><STRONG><a name="[1f9]"></a>LEDControlTask::blink(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, float)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ledcontroltask.o(.text._ZN14LEDControlTask5blinkEhhhjjf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LEDControlTask::blink(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, float) &rArr; Helper::setLED(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::setLED(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[1fb]"></a>LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int)</STRONG> (Thumb, 1120 bytes, Stack size 72 bytes, ledcontroltask.o(.text._ZN14LEDControlTask6breathEhhhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int) &rArr; LEDControlTask::blink(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, float) &rArr; Helper::setLED(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::blink(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, float)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[72]"></a>LEDControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ledcontroltask.o(.text._ZN14LEDControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> ledcontroltask.o(.rodata._ZTV14LEDControlTask)
</UL>
<P><STRONG><a name="[70]"></a>LEDControlTask::update(unsigned int)</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, ledcontroltask.o(.text._ZN14LEDControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LEDControlTask::update(unsigned int) &rArr; LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int) &rArr; LEDControlTask::blink(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, float) &rArr; Helper::setLED(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::setLED(unsigned char, unsigned char, unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::SongPlayerTask__sub_object(Robot&, unsigned short*, unsigned short, unsigned int)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::blink(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, float)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::isInited(unsigned short)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::getRCData()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::setValid(bool)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::isValid()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isOutOfClock(unsigned int, unsigned int)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::registerTask(Task_Base*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledcontroltask.o(.rodata._ZTV14LEDControlTask)
</UL>
<P><STRONG><a name="[207]"></a>LEDControlTask::LEDControlTask__sub_object(Robot&, unsigned int)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, robot.o(.text._ZN14LEDControlTaskC2ER5Robotj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDControlTask::LEDControlTask__sub_object(Robot&, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[6f]"></a>LEDControlTask::~LEDControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledcontroltask.o(.text._ZN14LEDControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LEDControlTask::~LEDControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledcontroltask.o(.rodata._ZTV14LEDControlTask)
</UL>
<P><STRONG><a name="[208]"></a>PIDControlTask::calculatePID(unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pidcontroltask.o(.text._ZN14PIDControlTask12calculatePIDEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PIDControlTask::calculatePID(unsigned int) &rArr; PID_Controller::calculateWithCPU(unsigned int) &rArr; PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::calculateWithCPU(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[20a]"></a>PIDControlTask::setPIDControllerExpect(float)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, armcontroltask.o(.text._ZN14PIDControlTask22setPIDControllerExpectEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIDControlTask::setPIDControllerExpect(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::setExpect(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::update(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[20c]"></a>PIDControlTask::setPIDControllerParams(_PID_Params_t const&)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, armcontroltask.o(.text._ZN14PIDControlTask22setPIDControllerParamsERK13_PID_Params_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIDControlTask::setPIDControllerParams(_PID_Params_t const&) &rArr; PID_Controller::setParams(_PID_Params_t const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::setParams(_PID_Params_t const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[20e]"></a>PIDControlTask::setPIDControllerFeedback(float)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, armcontroltask.o(.text._ZN14PIDControlTask24setPIDControllerFeedbackEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIDControlTask::setPIDControllerFeedback(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::setFeedback(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::update(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[75]"></a>PIDControlTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pidcontroltask.o(.text._ZN14PIDControlTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
</UL>
<P><STRONG><a name="[76]"></a>PIDControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pidcontroltask.o(.text._ZN14PIDControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
</UL>
<P><STRONG><a name="[74]"></a>PIDControlTask::update(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pidcontroltask.o(.text._ZN14PIDControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PIDControlTask::update(unsigned int) &rArr; PIDControlTask::calculatePID(unsigned int) &rArr; PID_Controller::calculateWithCPU(unsigned int) &rArr; PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::calculatePID(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
</UL>
<P><STRONG><a name="[210]"></a>PIDControlTask::getOutput()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, armcontroltask.o(.text._ZN14PIDControlTask9getOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIDControlTask::getOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::getOutput()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::update(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[212]"></a>PIDControlTask::PIDControlTask__sub_object(Robot&, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, motor_rm_tasks.o(.text._ZN14PIDControlTaskC2ER5Robotj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIDControlTask::PIDControlTask__sub_object(Robot&, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::PID_Controller()
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[73]"></a>PIDControlTask::~PIDControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pidcontroltask.o(.text._ZN14PIDControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIDControlTask::~PIDControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
</UL>
<P><STRONG><a name="[20f]"></a>PID_Controller::setFeedback(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN14PID_Controller11setFeedbackEf))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerFeedback(float)
</UL>

<P><STRONG><a name="[209]"></a>PID_Controller::calculateWithCPU(unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pidcontroltask.o(.text._ZN14PID_Controller16calculateWithCPUEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PID_Controller::calculateWithCPU(unsigned int) &rArr; PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::calculatePID(unsigned int)
</UL>

<P><STRONG><a name="[214]"></a>PID_Controller::calculateWithCPU(unsigned int, float, float, float)</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, pid_controller.o(.text._ZN14PID_Controller16calculateWithCPUEjfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::update(unsigned int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::calculateWithCPU(unsigned int)
</UL>

<P><STRONG><a name="[211]"></a>PID_Controller::getOutput()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, attitudesolutiontask.o(.text._ZN14PID_Controller9getOutputEv))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::getOutput()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::update(unsigned int)
</UL>

<P><STRONG><a name="[20b]"></a>PID_Controller::setExpect(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN14PID_Controller9setExpectEf))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerExpect(float)
</UL>

<P><STRONG><a name="[20d]"></a>PID_Controller::setParams(_PID_Params_t const&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pid_controller.o(.text._ZN14PID_Controller9setParamsERK13_PID_Params_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PID_Controller::setParams(_PID_Params_t const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerParams(_PID_Params_t const&)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::init()
</UL>

<P><STRONG><a name="[213]"></a>PID_Controller::PID_Controller()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pid_controller.o(.text._ZN14PID_ControllerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::PID_GyrotempTask__sub_object(Robot&, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::PIDControlTask__sub_object(Robot&, unsigned int)
</UL>

<P><STRONG><a name="[2ea]"></a>PID_Controller::PID_Controller__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pid_controller.o(.text._ZN14PID_ControllerC2Ev), UNUSED)

<P><STRONG><a name="[79]"></a>SongPlayerTask::init()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, songplayertask.o(.text._ZN14SongPlayerTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SongPlayerTask::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::setBuzzerOff()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> songplayertask.o(.rodata._ZTV14SongPlayerTask)
</UL>
<P><STRONG><a name="[7a]"></a>SongPlayerTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, songplayertask.o(.text._ZN14SongPlayerTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> songplayertask.o(.rodata._ZTV14SongPlayerTask)
</UL>
<P><STRONG><a name="[78]"></a>SongPlayerTask::update(unsigned int)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, songplayertask.o(.text._ZN14SongPlayerTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SongPlayerTask::update(unsigned int) &rArr; SongPlayerTask::playSong()
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::selfKill()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::playSong()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> songplayertask.o(.rodata._ZTV14SongPlayerTask)
</UL>
<P><STRONG><a name="[216]"></a>SongPlayerTask::playSong()</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, songplayertask.o(.text._ZN14SongPlayerTask8playSongEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SongPlayerTask::playSong()
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::setBuzzerFrequence(unsigned short)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::setBuzzerOff()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::update(unsigned int)
</UL>

<P><STRONG><a name="[205]"></a>SongPlayerTask::SongPlayerTask__sub_object(Robot&, unsigned short*, unsigned short, unsigned int)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ledcontroltask.o(.text._ZN14SongPlayerTaskC2ER5RobotPttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SongPlayerTask::SongPlayerTask__sub_object(Robot&, unsigned short*, unsigned short, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[77]"></a>SongPlayerTask::~SongPlayerTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, songplayertask.o(.text._ZN14SongPlayerTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SongPlayerTask::~SongPlayerTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> songplayertask.o(.rodata._ZTV14SongPlayerTask)
</UL>
<P><STRONG><a name="[21a]"></a>Arm_ControlTask::arm_time_delay(unsigned short)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN15Arm_ControlTask14arm_time_delayEt))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::arm_mode_switch()
</UL>

<P><STRONG><a name="[219]"></a>Arm_ControlTask::arm_mode_switch()</STRONG> (Thumb, 4296 bytes, Stack size 16 bytes, armcontroltask.o(.text._ZN15Arm_ControlTask15arm_mode_switchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Arm_ControlTask::arm_mode_switch() &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::arm_time_delay(unsigned short)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[7d]"></a>Arm_ControlTask::init()</STRONG> (Thumb, 552 bytes, Stack size 16 bytes, armcontroltask.o(.text._ZN15Arm_ControlTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Arm_ControlTask::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::getAngularVelocityTaskPointer()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::getAngleTaskPointer()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::registerTask(Task_Base*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
</UL>
<P><STRONG><a name="[7e]"></a>Arm_ControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN15Arm_ControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
</UL>
<P><STRONG><a name="[7c]"></a>Arm_ControlTask::update(unsigned int)</STRONG> (Thumb, 1510 bytes, Stack size 104 bytes, armcontroltask.o(.text._ZN15Arm_ControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Arm_ControlTask::update(unsigned int) &rArr; Motor_Backend::getCommonMeasurement()
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::setMotorInput(short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::setMotorPositon(float, float)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::arm_mode_switch()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::getOutput()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerFeedback(float)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerExpect(float)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Backend::getCommonMeasurement()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
</UL>
<P><STRONG><a name="[225]"></a>Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)</STRONG> (Thumb, 1484 bytes, Stack size 64 bytes, armcontroltask.o(.text._ZN15Arm_ControlTaskC2ER5RobotP18_Motor_RM_Params_tP13_PID_Params_tS5_S3_S5_S5_S3_S5_S5_S3_S5_S5_S3_S5_S5_P18_Motor_DM_Params_tS7_S7_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int) &rArr; Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::setInterval(unsigned int)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::setParams(_Motor_RM_Params_t)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::setParams(_Motor_DM_Params_t)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerParams(_PID_Params_t const&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[2eb]"></a>Arm_ControlTask::Arm_ControlTask__sub_object(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)</STRONG> (Thumb, 1484 bytes, Stack size 64 bytes, armcontroltask.o(.text._ZN15Arm_ControlTaskC2ER5RobotP18_Motor_RM_Params_tP13_PID_Params_tS5_S3_S5_S5_S3_S5_S5_S3_S5_S5_S3_S5_S5_P18_Motor_DM_Params_tS7_S7_j), UNUSED)

<P><STRONG><a name="[7b]"></a>Arm_ControlTask::~Arm_ControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, armcontroltask.o(.text._ZN15Arm_ControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Arm_ControlTask::~Arm_ControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
</UL>
<P><STRONG><a name="[80]"></a>RCProtocol_DBUS::processByte(unsigned char const volatile*)</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, rcprotocol_dbus.o(.text._ZN15RCProtocol_DBUS11processByteEPVKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCProtocol_DBUS::processByte(unsigned char const volatile*) &rArr; RCProtocol_Backend::publishRCData(RC_Data)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol_Backend::publishRCData(RC_Data)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcprotocol_dbus.o(.rodata._ZTV15RCProtocol_DBUS)
</UL>
<P><STRONG><a name="[7f]"></a>RCProtocol_DBUS::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rcprotocol_dbus.o(.text._ZN15RCProtocol_DBUS4initEv))
<BR>[Address Reference Count : 1]<UL><LI> rcprotocol_dbus.o(.rodata._ZTV15RCProtocol_DBUS)
</UL>
<P><STRONG><a name="[81]"></a>RCProtocol_DBUS::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rcprotocol_dbus.o(.text._ZN15RCProtocol_DBUS6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> rcprotocol_dbus.o(.rodata._ZTV15RCProtocol_DBUS)
</UL>
<P><STRONG><a name="[1e2]"></a>RCProtocol_DBUS::RCProtocol_DBUS__sub_object(RCProtocol&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rcprotocol.o(.text._ZN15RCProtocol_DBUSC2ER10RCProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCProtocol_DBUS::RCProtocol_DBUS__sub_object(RCProtocol&)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol_Backend::RCProtocol_Backend__sub_object(RCProtocol&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::init()
</UL>

<P><STRONG><a name="[84]"></a>PID_GyrotempTask::init()</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, attitudesolutiontask.o(.text._ZN16PID_GyrotempTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PID_GyrotempTask::init() &rArr; PID_Controller::setParams(_PID_Params_t const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::setParams(_PID_Params_t const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
</UL>
<P><STRONG><a name="[85]"></a>PID_GyrotempTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, attitudesolutiontask.o(.text._ZN16PID_GyrotempTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
</UL>
<P><STRONG><a name="[83]"></a>PID_GyrotempTask::update(unsigned int)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, attitudesolutiontask.o(.text._ZN16PID_GyrotempTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PID_GyrotempTask::update(unsigned int) &rArr; PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::getTemperature(unsigned short)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::getOutput()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
</UL>
<P><STRONG><a name="[22e]"></a>PID_GyrotempTask::PID_GyrotempTask__sub_object(Robot&, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, robot.o(.text._ZN16PID_GyrotempTaskC2ER5Robotj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PID_GyrotempTask::PID_GyrotempTask__sub_object(Robot&, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::PID_Controller()
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::AttitudeSolutionTask__sub_object(Robot&)
</UL>

<P><STRONG><a name="[82]"></a>PID_GyrotempTask::~PID_GyrotempTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, attitudesolutiontask.o(.text._ZN16PID_GyrotempTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PID_GyrotempTask::~PID_GyrotempTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
</UL>
<P><STRONG><a name="[234]"></a>Transmit_DMAFunc::setData(__UART_HandleTypeDef*, unsigned char*, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, refereesystemtask.o(.text._ZN16Transmit_DMAFunc7setDataEP20__UART_HandleTypeDefPhj))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[22f]"></a>Transmit_DMAFunc::Transmit_DMAFunc__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, robot.o(.text._ZN16Transmit_DMAFuncC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Transmit_DMAFunc::Transmit_DMAFunc__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncFuncBase::AsyncFuncBase__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefereeSystemTask__sub_object(Robot&, unsigned int)
</UL>

<P><STRONG><a name="[86]"></a>Transmit_DMAFunc::operator()()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, robot.o(.text._ZN16Transmit_DMAFuncclEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Transmit_DMAFunc::operator()() &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncFuncBase::reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot.o(.rodata._ZTV16Transmit_DMAFunc)
</UL>
<P><STRONG><a name="[89]"></a>GimbalControlTask::init()</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, gimbalcontroltask.o(.text._ZN17GimbalControlTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GimbalControlTask::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::registerTask(Task_Base*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
</UL>
<P><STRONG><a name="[8a]"></a>GimbalControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gimbalcontroltask.o(.text._ZN17GimbalControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
</UL>
<P><STRONG><a name="[88]"></a>GimbalControlTask::update(unsigned int)</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, gimbalcontroltask.o(.text._ZN17GimbalControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GimbalControlTask::update(unsigned int) &rArr; Motor_Backend::getCommonMeasurement()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::setServo(unsigned char, float)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::setMotorInput(short)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::getOutput()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerFeedback(float)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerExpect(float)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Backend::getCommonMeasurement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
</UL>
<P><STRONG><a name="[232]"></a>GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)</STRONG> (Thumb, 692 bytes, Stack size 56 bytes, gimbalcontroltask.o(.text._ZN17GimbalControlTaskC2ER5RobotP18_Motor_RM_Params_tP13_PID_Params_tS5_S3_S5_S5_S3_S5_S5_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int) &rArr; Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::setInterval(unsigned int)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::setParams(_Motor_RM_Params_t)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerParams(_PID_Params_t const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[2ec]"></a>GimbalControlTask::GimbalControlTask__sub_object(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)</STRONG> (Thumb, 692 bytes, Stack size 56 bytes, gimbalcontroltask.o(.text._ZN17GimbalControlTaskC2ER5RobotP18_Motor_RM_Params_tP13_PID_Params_tS5_S3_S5_S5_S3_S5_S5_j), UNUSED)

<P><STRONG><a name="[87]"></a>GimbalControlTask::~GimbalControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gimbalcontroltask.o(.text._ZN17GimbalControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GimbalControlTask::~GimbalControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
</UL>
<P><STRONG><a name="[233]"></a>RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask12Transmit_DMAEP20__UART_HandleTypeDefPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int) &rArr; Scheduler::startAsync(AsyncFuncBase&, unsigned int) &rArr; Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::startAsync(AsyncFuncBase&, unsigned int)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_DMAFunc::setData(__UART_HandleTypeDef*, unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawCircle(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_ClearLayer(unsigned char)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawLine(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[1c0]"></a>RefereeSystemTask::pushToBuffer(unsigned short, unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask12pushToBufferEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RefereeSystemTask::pushToBuffer(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[236]"></a>RefereeSystemTask::Refresh_ClientUI()</STRONG> (Thumb, 1144 bytes, Stack size 64 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask16Refresh_ClientUIEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = RefereeSystemTask::Refresh_ClientUI() &rArr; RefereeSystemTask::RefreshDynamicClientUI() &rArr; RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...) &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::set_line_graphics_data(unsigned char*, unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawCircle(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_ClearLayer(unsigned char)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawLine(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::update(unsigned int)
</UL>

<P><STRONG><a name="[23d]"></a>RefereeSystemTask::ClientUI_DrawLine(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask17ClientUI_DrawLineEhPchthtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RefereeSystemTask::ClientUI_DrawLine(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short) &rArr; Append_CRC16_Check_Sum(unsigned char*, unsigned int) &rArr; Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::set_line_graphics_data(unsigned char*, unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[237]"></a>RefereeSystemTask::ClientUI_ClearLayer(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask19ClientUI_ClearLayerEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RefereeSystemTask::ClientUI_ClearLayer(unsigned char) &rArr; RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short) &rArr; Append_CRC16_Check_Sum(unsigned char*, unsigned int) &rArr; Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::set_clear_graphics_data(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[23a]"></a>RefereeSystemTask::ClientUI_DrawCircle(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask19ClientUI_DrawCircleEhPchthttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RefereeSystemTask::ClientUI_DrawCircle(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short) &rArr; RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short) &rArr; Append_CRC16_Check_Sum(unsigned char*, unsigned int) &rArr; Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::set_circle_graphics_data(unsigned char*, unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[239]"></a>RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...)</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask19ClientUI_DrawStringEhPchhhttPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...) &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum(unsigned char*, unsigned int)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum(unsigned char*, unsigned int)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[238]"></a>RefereeSystemTask::RefreshDynamicClientUI()</STRONG> (Thumb, 1384 bytes, Stack size 160 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask22RefreshDynamicClientUIEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = RefereeSystemTask::RefreshDynamicClientUI() &rArr; RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...) &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Backend::getCommonMeasurement()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawCircle(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawLine(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[23b]"></a>RefereeSystemTask::set_line_graphics_data(unsigned char*, unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask22set_line_graphics_dataEPhhPchthtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RefereeSystemTask::set_line_graphics_data(unsigned char*, unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawLine(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[192]"></a>RefereeSystemTask::getRobotRefereeStatus_t()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text._ZN17RefereeSystemTask23getRobotRefereeStatus_tEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RefereeSystemTask::getRobotRefereeStatus_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[23e]"></a>RefereeSystemTask::set_clear_graphics_data(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask23set_clear_graphics_dataEPhhh))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_ClearLayer(unsigned char)
</UL>

<P><STRONG><a name="[23f]"></a>RefereeSystemTask::set_circle_graphics_data(unsigned char*, unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask24set_circle_graphics_dataEPhhPchthttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RefereeSystemTask::set_circle_graphics_data(unsigned char*, unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawCircle(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[23c]"></a>RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask29create_ui_interactive_packageEPhht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RefereeSystemTask::create_ui_interactive_package(unsigned char*, unsigned char, unsigned short) &rArr; Append_CRC16_Check_Sum(unsigned char*, unsigned int) &rArr; Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum(unsigned char*, unsigned int)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawCircle(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_ClearLayer(unsigned char)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::ClientUI_DrawLine(unsigned char, char*, unsigned char, unsigned short, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>

<P><STRONG><a name="[8d]"></a>RefereeSystemTask::init()</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RefereeSystemTask::init() &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
</UL>
<P><STRONG><a name="[8e]"></a>RefereeSystemTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
</UL>
<P><STRONG><a name="[8c]"></a>RefereeSystemTask::update(unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RefereeSystemTask::update(unsigned int) &rArr; RefereeSystemTask::Refresh_ClientUI() &rArr; RefereeSystemTask::RefreshDynamicClientUI() &rArr; RefereeSystemTask::ClientUI_DrawString(unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, char const*, ...) &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::parseData()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Refresh_ClientUI()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
</UL>
<P><STRONG><a name="[247]"></a>RefereeSystemTask::set_t_0()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, remotecontroltask.o(.text._ZN17RefereeSystemTask7set_t_0Ev))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[243]"></a>RefereeSystemTask::parseData()</STRONG> (Thumb, 1438 bytes, Stack size 48 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTask9parseDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RefereeSystemTask::parseData() &rArr; Verify_CRC16_Check_Sum(unsigned char*, unsigned int) &rArr; Get_CRC16_Check_Sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8Arry2float(unsigned char*)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum(unsigned char*, unsigned int)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum(unsigned char*, unsigned int)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::update(unsigned int)
</UL>

<P><STRONG><a name="[246]"></a>RefereeSystemTask::set_num_0()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, remotecontroltask.o(.text._ZN17RefereeSystemTask9set_num_0Ev))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[245]"></a>RefereeSystemTask::RefereeSystemTask__sub_object(Robot&, unsigned int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, robot.o(.text._ZN17RefereeSystemTaskC2ER5Robotj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RefereeSystemTask::RefereeSystemTask__sub_object(Robot&, unsigned int) &rArr; Transmit_DMAFunc::Transmit_DMAFunc__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_DMAFunc::Transmit_DMAFunc__sub_object()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[8b]"></a>RefereeSystemTask::~RefereeSystemTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, refereesystemtask.o(.text._ZN17RefereeSystemTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RefereeSystemTask::~RefereeSystemTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
</UL>
<P><STRONG><a name="[91]"></a>RemoteControlTask::init()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remotecontroltask.o(.text._ZN17RemoteControlTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
</UL>
<P><STRONG><a name="[92]"></a>RemoteControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, remotecontroltask.o(.text._ZN17RemoteControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
</UL>
<P><STRONG><a name="[90]"></a>RemoteControlTask::update(unsigned int)</STRONG> (Thumb, 3236 bytes, Stack size 80 bytes, remotecontroltask.o(.text._ZN17RemoteControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RemoteControlTask::update(unsigned int) &rArr; RCProtocol::getRCData()
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::set_num_0()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::set_t_0()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::getRCData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
</UL>
<P><STRONG><a name="[248]"></a>RemoteControlTask::RemoteControlTask__sub_object(Robot&, unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, robot.o(.text._ZN17RemoteControlTaskC2ER5Robotj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RemoteControlTask::RemoteControlTask__sub_object(Robot&, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[8f]"></a>RemoteControlTask::~RemoteControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, remotecontroltask.o(.text._ZN17RemoteControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RemoteControlTask::~RemoteControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
</UL>
<P><STRONG><a name="[194]"></a>ChassisControlTask::get_can_tx_data()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ChassisControlTask15get_can_tx_dataEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[95]"></a>ChassisControlTask::init()</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, chassiscontroltask.o(.text._ZN18ChassisControlTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ChassisControlTask::init() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::registerTask(Task_Base*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt::sq(float)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
</UL>
<P><STRONG><a name="[96]"></a>ChassisControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chassiscontroltask.o(.text._ZN18ChassisControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
</UL>
<P><STRONG><a name="[94]"></a>ChassisControlTask::update(unsigned int)</STRONG> (Thumb, 3928 bytes, Stack size 112 bytes, chassiscontroltask.o(.text._ZN18ChassisControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ChassisControlTask::update(unsigned int) &rArr; Motor_Backend::getCommonMeasurement()
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::setMotorInput(short)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::getOutput()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerFeedback(float)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerExpect(float)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Backend::getCommonMeasurement()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::getRCData()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
</UL>
<P><STRONG><a name="[24b]"></a>ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)</STRONG> (Thumb, 914 bytes, Stack size 56 bytes, chassiscontroltask.o(.text._ZN18ChassisControlTaskC2ER5RobotP18_Motor_RM_Params_tP13_PID_Params_tS5_S3_S5_S5_S3_S5_S5_S3_S5_S5_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int) &rArr; Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;float&rang;::LowPassFilter__sub_object()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::setInterval(unsigned int)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::setParams(_Motor_RM_Params_t)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerParams(_PID_Params_t const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[2ed]"></a>ChassisControlTask::ChassisControlTask__sub_object(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)</STRONG> (Thumb, 914 bytes, Stack size 56 bytes, chassiscontroltask.o(.text._ZN18ChassisControlTaskC2ER5RobotP18_Motor_RM_Params_tP13_PID_Params_tS5_S3_S5_S5_S3_S5_S5_S3_S5_S5_j), UNUSED)

<P><STRONG><a name="[93]"></a>ChassisControlTask::~ChassisControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chassiscontroltask.o(.text._ZN18ChassisControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ChassisControlTask::~ChassisControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
</UL>
<P><STRONG><a name="[22b]"></a>RCProtocol_Backend::publishRCData(RC_Data)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rcprotocol_backend.o(.text._ZN18RCProtocol_Backend13publishRCDataE7RC_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCProtocol_Backend::publishRCData(RC_Data)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol_DBUS::processByte(unsigned char const volatile*)
</UL>

<P><STRONG><a name="[22c]"></a>RCProtocol_Backend::RCProtocol_Backend__sub_object(RCProtocol&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rcprotocol_backend.o(.text._ZN18RCProtocol_BackendC2ER10RCProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol_DBUS::RCProtocol_DBUS__sub_object(RCProtocol&)
</UL>

<P><STRONG><a name="[27b]"></a>_CAN_Rx_Data_Pack_t::_CAN_Rx_Data_Pack_t__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor_rm.o(.text._ZN19_CAN_Rx_Data_Pack_tC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
</UL>

<P><STRONG><a name="[190]"></a>AttitudeSolutionTask::getPIDGyrotempTaskPointer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text._ZN20AttitudeSolutionTask25getPIDGyrotempTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[99]"></a>AttitudeSolutionTask::init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, attitudesolutiontask.o(.text._ZN20AttitudeSolutionTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AttitudeSolutionTask::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::init()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
</UL>
<P><STRONG><a name="[9a]"></a>AttitudeSolutionTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, attitudesolutiontask.o(.text._ZN20AttitudeSolutionTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
</UL>
<P><STRONG><a name="[98]"></a>AttitudeSolutionTask::update(unsigned int)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, attitudesolutiontask.o(.text._ZN20AttitudeSolutionTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AttitudeSolutionTask::update(unsigned int) &rArr; MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::update()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::getAccel(unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::getGyro(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
</UL>
<P><STRONG><a name="[24f]"></a>AttitudeSolutionTask::AttitudeSolutionTask__sub_object(Robot&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, robot.o(.text._ZN20AttitudeSolutionTaskC2ER5Robot))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AttitudeSolutionTask::AttitudeSolutionTask__sub_object(Robot&) &rArr; MahonyAHRS::MahonyAHRS(float, float) &rArr; AHRS::AHRS__sub_object() &rArr; Matrix3&lang;float&rang;::Matrix3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRS(float, float)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::PID_GyrotempTask__sub_object(Robot&, unsigned int)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[97]"></a>AttitudeSolutionTask::~AttitudeSolutionTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, attitudesolutiontask.o(.text._ZN20AttitudeSolutionTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AttitudeSolutionTask::~AttitudeSolutionTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
</UL>
<P><STRONG><a name="[250]"></a>InertialSensor_BMI088::rotateGyro()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08810rotateGyroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InertialSensor_BMI088::rotateGyro()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(Vector3&lang;float&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::update()
</UL>

<P><STRONG><a name="[9e]"></a>InertialSensor_BMI088::updateGyro()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08810updateGyroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InertialSensor_BMI088::updateGyro() &rArr; InertialSensor_BMI088::readMultiRegGyro(unsigned char, unsigned char*, unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readMultiRegGyro(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
</UL>
<P><STRONG><a name="[252]"></a>InertialSensor_BMI088::rotateAccel()</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08811rotateAccelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InertialSensor_BMI088::rotateAccel()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(Vector3&lang;float&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::update()
</UL>

<P><STRONG><a name="[9d]"></a>InertialSensor_BMI088::updateAccel()</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08811updateAccelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = InertialSensor_BMI088::updateAccel() &rArr; InertialSensor_BMI088::readMultiRegAccel(unsigned char, unsigned char*, unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(Vector3&lang;float&rang; const&)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readMultiRegAccel(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
</UL>
<P><STRONG><a name="[254]"></a>InertialSensor_BMI088::readWriteByte(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08813readWriteByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::writeSingleRegAccel(unsigned char, unsigned char)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::writeSingleRegGyro(unsigned char, unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readSingleRegAccel(unsigned char)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readSingleRegGyro(unsigned char)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readMultiRegAccel(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readMultiRegGyro(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[9f]"></a>InertialSensor_BMI088::getTemperature()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08814getTemperatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InertialSensor_BMI088::getTemperature() &rArr; InertialSensor_BMI088::readMultiRegAccel(unsigned char, unsigned char*, unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readMultiRegAccel(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
</UL>
<P><STRONG><a name="[251]"></a>InertialSensor_BMI088::readMultiRegGyro(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08816readMultiRegGyroEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InertialSensor_BMI088::readMultiRegGyro(unsigned char, unsigned char*, unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::updateGyro()
</UL>

<P><STRONG><a name="[253]"></a>InertialSensor_BMI088::readMultiRegAccel(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08817readMultiRegAccelEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InertialSensor_BMI088::readMultiRegAccel(unsigned char, unsigned char*, unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::updateAccel()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::getTemperature()
</UL>

<P><STRONG><a name="[255]"></a>InertialSensor_BMI088::readSingleRegGyro(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08817readSingleRegGyroEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InertialSensor_BMI088::readSingleRegGyro(unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::init()
</UL>

<P><STRONG><a name="[256]"></a>InertialSensor_BMI088::readSingleRegAccel(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08818readSingleRegAccelEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InertialSensor_BMI088::readSingleRegAccel(unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::init()
</UL>

<P><STRONG><a name="[257]"></a>InertialSensor_BMI088::writeSingleRegGyro(unsigned char, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08818writeSingleRegGyroEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InertialSensor_BMI088::writeSingleRegGyro(unsigned char, unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::init()
</UL>

<P><STRONG><a name="[258]"></a>InertialSensor_BMI088::writeSingleRegAccel(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI08819writeSingleRegAccelEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InertialSensor_BMI088::writeSingleRegAccel(unsigned char, unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readWriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::init()
</UL>

<P><STRONG><a name="[9b]"></a>InertialSensor_BMI088::init()</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI0884initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = InertialSensor_BMI088::init() &rArr; InertialSensor_BMI088::writeSingleRegAccel(unsigned char, unsigned char) &rArr; InertialSensor_BMI088::readWriteByte(unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter(float, float)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readAddress(unsigned int, unsigned int*, unsigned short)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::writeSingleRegAccel(unsigned char, unsigned char)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::writeSingleRegGyro(unsigned char, unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readSingleRegAccel(unsigned char)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::readSingleRegGyro(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
</UL>
<P><STRONG><a name="[9c]"></a>InertialSensor_BMI088::update()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI0886updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InertialSensor_BMI088::update() &rArr; InertialSensor_BMI088::rotateAccel()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::rotateAccel()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::rotateGyro()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_Backend::publishAccel()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_Backend::correctAccel()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_Backend::publishGyro()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_Backend::correctGyro()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
</UL>
<P><STRONG><a name="[a0]"></a>InertialSensor_BMI088::calibGyro(unsigned int)</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI0889calibGyroEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InertialSensor_BMI088::calibGyro(unsigned int) &rArr; flash_eraseAddress(unsigned int, unsigned short) &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeAddress(unsigned int, unsigned int*, unsigned short)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_eraseAddress(unsigned int, unsigned short)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator/(float) const
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator+=(Vector3&lang;float&rang; const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inertialsensor_bmi088.o(.rodata._ZTV21InertialSensor_BMI088)
</UL>
<P><STRONG><a name="[25f]"></a>InertialSensor_BMI088::InertialSensor_BMI088(InertialSensor&, RotationPreset)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI088C2ER14InertialSensor14RotationPreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InertialSensor_BMI088::InertialSensor_BMI088(InertialSensor&, RotationPreset) &rArr; InertialSensor_Backend::InertialSensor_Backend__sub_object(InertialSensor&) &rArr; LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_Backend::InertialSensor_Backend__sub_object(InertialSensor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[2ee]"></a>InertialSensor_BMI088::InertialSensor_BMI088__sub_object(InertialSensor&, RotationPreset)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, inertialsensor_bmi088.o(.text._ZN21InertialSensor_BMI088C2ER14InertialSensor14RotationPreset), UNUSED)

<P><STRONG><a name="[25a]"></a>InertialSensor_Backend::correctGyro()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, inertialsensor_backend.o(.text._ZN22InertialSensor_Backend11correctGyroEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::update()
</UL>

<P><STRONG><a name="[25c]"></a>InertialSensor_Backend::publishGyro()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inertialsensor_backend.o(.text._ZN22InertialSensor_Backend11publishGyroEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::update()
</UL>

<P><STRONG><a name="[259]"></a>InertialSensor_Backend::correctAccel()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inertialsensor_backend.o(.text._ZN22InertialSensor_Backend12correctAccelEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::update()
</UL>

<P><STRONG><a name="[25b]"></a>InertialSensor_Backend::publishAccel()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inertialsensor_backend.o(.text._ZN22InertialSensor_Backend12publishAccelEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::update()
</UL>

<P><STRONG><a name="[260]"></a>InertialSensor_Backend::InertialSensor_Backend__sub_object(InertialSensor&)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, inertialsensor_backend.o(.text._ZN22InertialSensor_BackendC2ER14InertialSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InertialSensor_Backend::InertialSensor_Backend__sub_object(InertialSensor&) &rArr; LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::InertialSensor_BMI088(InertialSensor&, RotationPreset)
</UL>

<P><STRONG><a name="[a3]"></a>Motor_DM_PSControlTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_dm_task.o(.text._ZN22Motor_DM_PSControlTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
</UL>
<P><STRONG><a name="[a4]"></a>Motor_DM_PSControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_dm_task.o(.text._ZN22Motor_DM_PSControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
</UL>
<P><STRONG><a name="[a2]"></a>Motor_DM_PSControlTask::update(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motor_dm_task.o(.text._ZN22Motor_DM_PSControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_DM_PSControlTask::update(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
</UL>
<P><STRONG><a name="[228]"></a>Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, motor_dm_task.o(.text._ZN22Motor_DM_PSControlTaskC2ER5RobotR9CanDevicetthaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::addBackend(Motor_Backend*)
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[2ef]"></a>Motor_DM_PSControlTask::Motor_DM_PSControlTask__sub_object(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, motor_dm_task.o(.text._ZN22Motor_DM_PSControlTaskC2ER5RobotR9CanDevicetthaj), UNUSED)

<P><STRONG><a name="[a1]"></a>Motor_DM_PSControlTask::~Motor_DM_PSControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_dm_task.o(.text._ZN22Motor_DM_PSControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_DM_PSControlTask::~Motor_DM_PSControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
</UL>
<P><STRONG><a name="[21d]"></a>Motor_RM_PIDControlTask::getAngleTaskPointer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN23Motor_RM_PIDControlTask19getAngleTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::init()
</UL>

<P><STRONG><a name="[21e]"></a>Motor_RM_PIDControlTask::getAngularVelocityTaskPointer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN23Motor_RM_PIDControlTask29getAngularVelocityTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::init()
</UL>

<P><STRONG><a name="[a7]"></a>Motor_RM_PIDControlTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
</UL>
<P><STRONG><a name="[a8]"></a>Motor_RM_PIDControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
</UL>
<P><STRONG><a name="[a6]"></a>Motor_RM_PIDControlTask::update(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_RM_PIDControlTask::update(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
</UL>
<P><STRONG><a name="[226]"></a>Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTaskC2ER5RobotR9CanDevicetthaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::PIDControlTask__sub_object(Robot&, unsigned int)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::Task_Base__sub_object(Robot&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::addBackend(Motor_Backend*)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[2f0]"></a>Motor_RM_PIDControlTask::Motor_RM_PIDControlTask__sub_object(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTaskC2ER5RobotR9CanDevicetthaj), UNUSED)

<P><STRONG><a name="[a5]"></a>Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
</UL>
<P><STRONG><a name="[27a]"></a>_Motor_DM_Measurement_t::_Motor_DM_Measurement_t__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_dm.o(.text._ZN23_Motor_DM_Measurement_tC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
</UL>

<P><STRONG><a name="[249]"></a>cmt::sq(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commonmath.o(.text._ZN3cmt2sqEf))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::init()
</UL>

<P><STRONG><a name="[1eb]"></a>cmt::isZero(float)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mahonyahrs.o(.text._ZN3cmt6isZeroEf))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::isZero() const
</UL>

<P><STRONG><a name="[1e8]"></a>cmt::invSqrt(float)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, commonmath.o(.text._ZN3cmt7invSqrtEf))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::normalize()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionT&lang;float&rang;::normalize()
</UL>

<P><STRONG><a name="[b2]"></a>cmt::SimpleAdd&lang;float&rang;::operator()(float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commonmath.o(.text._ZN3cmt9SimpleAddIfEclEff))
<BR>[Address Reference Count : 1]<UL><LI> commonmath.o(.rodata._ZTVN3cmt9SimpleAddIfEE)
</UL>
<P><STRONG><a name="[1df]"></a>AHRS::AHRS__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mahonyahrs.o(.text._ZN4AHRSC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AHRS::AHRS__sub_object() &rArr; Matrix3&lang;float&rang;::Matrix3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3__sub_object()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionT&lang;float&rang;::QuaternionT__sub_object()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRS(float, float)
</UL>

<P><STRONG><a name="[1f5]"></a>Error::Error_Handler()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, error.o(.text._ZN5Error13Error_HandlerEv))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::addBackend(InertialSensor_Backend*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::addRxLink(_CAN_Rx_Data_Pack_t*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::Error_Handler()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>

<P><STRONG><a name="[262]"></a>Motor::addBackend(Motor_Backend*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motor.o(.text._ZN5Motor10addBackendEP13Motor_Backend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor::addBackend(Motor_Backend*)
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[272]"></a>Motor::Motor__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN5MotorC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[15a]"></a>Robot::getScheduler()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN5Robot12getSchedulerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Robot::getScheduler() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[144]"></a>Robot::getCAN1DevicePointer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot20getCAN1DevicePointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[145]"></a>Robot::getCAN2DevicePointer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot20getCAN2DevicePointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[1c1]"></a>Robot::getRCProtocolPointer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot20getRCProtocolPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>Robot::getRemoteControlTask()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot20getRemoteControlTaskEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[18e]"></a>Robot::getArmControlTaskPointer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot24getArmControlTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[196]"></a>Robot::getLEDControlTaskPointer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot24getLEDControlTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[191]"></a>Robot::getRefereeSystemTaskPointer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot27getRefereeSystemTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[193]"></a>Robot::getChassisControlTaskPointer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot28getChassisControlTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[159]"></a>Robot::getAttitudeSolutionTaskPointer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN5Robot30getAttitudeSolutionTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[266]"></a>Robot::run()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, robot.o(.text._ZN5Robot3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Robot::run() &rArr; Scheduler::run() &rArr; Scheduler::unregisterTask(Task_Base**)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[268]"></a>Robot::init()</STRONG> (Thumb, 1134 bytes, Stack size 152 bytes, robot.o(.text._ZN5Robot4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Robot::init() &rArr; Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int) &rArr; Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::addBackend(InertialSensor_Backend*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::init(__CAN_HandleTypeDef*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Params::initMotorsParams()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::AttitudeSolutionTask__sub_object(Robot&)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlTask::RemoteControlTask__sub_object(Robot&, unsigned int)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefereeSystemTask__sub_object(Robot&, unsigned int)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::LEDControlTask__sub_object(Robot&, unsigned int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Base::setInterval(unsigned int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::CANSendTask(Robot&, CanDevice*, unsigned short, unsigned int)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::init()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::registerTask(Task_Base*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::init()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::InertialSensor_BMI088(InertialSensor&, RotationPreset)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26d]"></a>Robot::Robot__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text._ZN5RobotC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Robot::Robot__sub_object() &rArr; InertialSensor::InertialSensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::Scheduler()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::CanDevice()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Params::Params__sub_object()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Helper::Helper__sub_object()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::InertialSensor()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::RCProtocol__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[64]"></a>Robot::~Robot__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text._ZN5RobotD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Robot::~Robot__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::~RCProtocol__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[215]"></a>Helper::setBuzzerOff()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, helper.o(.text._ZN6Helper12setBuzzerOffEv))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::playSong()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::init()
</UL>

<P><STRONG><a name="[218]"></a>Helper::setBuzzerFrequence(unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, helper.o(.text._ZN6Helper18setBuzzerFrequenceEt))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::playSong()
</UL>

<P><STRONG><a name="[1fa]"></a>Helper::setLED(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, helper.o(.text._ZN6Helper6setLEDEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Helper::setLED(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::blink(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, float)
</UL>

<P><STRONG><a name="[231]"></a>Helper::setServo(unsigned char, float)</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, helper.o(.text._ZN6Helper8setServoEhf))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[26f]"></a>Helper::Helper__sub_object()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(.text._ZN6HelperC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Helper::Helper__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[269]"></a>Params::initMotorsParams()</STRONG> (Thumb, 2444 bytes, Stack size 36 bytes, params.o(.text._ZN6Params16initMotorsParamsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Params::initMotorsParams()
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[273]"></a>Params::Params__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN6ParamsC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[265]"></a>Matrix3&lang;float&rang;::Matrix3__sub_object()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mahonyahrs.o(.text._ZN7Matrix3IfEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Matrix3&lang;float&rang;::Matrix3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::set(float, float, float)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionT&lang;float&rang;::toRotationMatrix() const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS__sub_object()
</UL>

<P><STRONG><a name="[275]"></a>Vector3&lang;float&rang;::set(float, float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mahonyahrs.o(.text._ZN7Vector3IfE3setEfff))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3__sub_object()
</UL>

<P><STRONG><a name="[1d9]"></a>Vector3&lang;float&rang;::zero()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mahonyahrs.o(.text._ZN7Vector3IfE4zeroEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter(float, float)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRS(float, float)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::calibGyro(unsigned int)
</UL>

<P><STRONG><a name="[1d8]"></a>Vector3&lang;float&rang;::normalize()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mahonyahrs.o(.text._ZN7Vector3IfE9normalizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector3&lang;float&rang;::normalize()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt::invSqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1f0]"></a>Vector3&lang;float&rang;::Vector3__sub_object(Vector3&lang;float&rang; const&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ahrs.o(.text._ZN7Vector3IfEC2ERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::updateAccel()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::rotateAccel()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::rotateGyro()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::getAccel(unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::getGyro(unsigned short)
</UL>

<P><STRONG><a name="[284]"></a>Vector3&lang;float&rang;::Vector3__sub_object(float, float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inertialsensor_bmi088.o(.text._ZN7Vector3IfEC2Efff))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator+(Vector3&lang;float&rang; const&) const
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator*(float) const
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator/(float) const
</UL>

<P><STRONG><a name="[1d6]"></a>Vector3&lang;float&rang;::Vector3__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ahrs.o(.text._ZN7Vector3IfEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor::InertialSensor()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter(float, float)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3__sub_object()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS__sub_object()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRS(float, float)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::LowPassFilter__sub_object()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_Backend::InertialSensor_Backend__sub_object(InertialSensor&)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::calibGyro(unsigned int)
</UL>

<P><STRONG><a name="[25d]"></a>Vector3&lang;float&rang;::operator+=(Vector3&lang;float&rang; const&)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, inertialsensor_bmi088.o(.text._ZN7Vector3IfEpLERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::calibGyro(unsigned int)
</UL>

<P><STRONG><a name="[276]"></a>Motor_DM::start_motor()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN8Motor_DM11start_motorEv))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::setMotorPositon(float, float)
</UL>

<P><STRONG><a name="[278]"></a>Motor_DM::uint_to_float(int, float, float, int)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motor_dm.o(.text._ZN8Motor_DM13uint_to_floatEiffi))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::updateMotorMeasurement()
</UL>

<P><STRONG><a name="[224]"></a>Motor_DM::setMotorPositon(float, float)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, armcontroltask.o(.text._ZN8Motor_DM15setMotorPositonEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_DM::setMotorPositon(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::start_motor()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[ac]"></a>Motor_DM::updateMeasurement()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor_dm.o(.text._ZN8Motor_DM17updateMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_DM::updateMeasurement() &rArr; Motor_DM::updateMotorMeasurement() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::updateMotorMeasurement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dm.o(.rodata._ZTV8Motor_DM)
</UL>
<P><STRONG><a name="[277]"></a>Motor_DM::updateMotorMeasurement()</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, motor_dm.o(.text._ZN8Motor_DM22updateMotorMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_DM::updateMotorMeasurement() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::uint_to_float(int, float, float, int)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::update(unsigned int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::updateMeasurement()
</UL>

<P><STRONG><a name="[a9]"></a>Motor_DM::init()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motor_dm.o(.text._ZN8Motor_DM4initEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_dm.o(.rodata._ZTV8Motor_DM)
</UL>
<P><STRONG><a name="[ab]"></a>Motor_DM::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_dm.o(.text._ZN8Motor_DM6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_dm.o(.rodata._ZTV8Motor_DM)
</UL>
<P><STRONG><a name="[aa]"></a>Motor_DM::update(unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_dm.o(.text._ZN8Motor_DM6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_DM::update(unsigned int) &rArr; Motor_DM::updateMotorMeasurement() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::updateMotorMeasurement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dm.o(.rodata._ZTV8Motor_DM)
</UL>
<P><STRONG><a name="[229]"></a>Motor_DM::setParams(_Motor_DM_Params_t)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, armcontroltask.o(.text._ZN8Motor_DM9setParamsE18_Motor_DM_Params_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_DM::setParams(_Motor_DM_Params_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[261]"></a>Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, motor_dm.o(.text._ZN8Motor_DMC2ER5MotorR9CanDevicettha))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::addRxLink(_CAN_Rx_Data_Pack_t*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Motor_DM_Measurement_t::_Motor_DM_Measurement_t__sub_object()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CAN_Rx_Data_Pack_t::_CAN_Rx_Data_Pack_t__sub_object()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Backend::Motor_Backend__sub_object(Motor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[2f1]"></a>Motor_DM::Motor_DM__sub_object(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, motor_dm.o(.text._ZN8Motor_DMC2ER5MotorR9CanDevicettha), UNUSED)

<P><STRONG><a name="[27e]"></a>Motor_RM::syncCANData()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN8Motor_RM11syncCANDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::setMotorInput(short)
</UL>

<P><STRONG><a name="[223]"></a>Motor_RM::setMotorInput(short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, armcontroltask.o(.text._ZN8Motor_RM13setMotorInputEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_RM::setMotorInput(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::syncCANData()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::update(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[b0]"></a>Motor_RM::updateMeasurement()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor_rm.o(.text._ZN8Motor_RM17updateMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_RM::updateMeasurement() &rArr; Motor_RM::updateMotorMeasurement() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::updateMotorMeasurement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_rm.o(.rodata._ZTV8Motor_RM)
</UL>
<P><STRONG><a name="[27f]"></a>Motor_RM::updateMotorMeasurement()</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, motor_rm.o(.text._ZN8Motor_RM22updateMotorMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_RM::updateMotorMeasurement() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::update(unsigned int)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::updateMeasurement()
</UL>

<P><STRONG><a name="[ad]"></a>Motor_RM::init()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motor_rm.o(.text._ZN8Motor_RM4initEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_rm.o(.rodata._ZTV8Motor_RM)
</UL>
<P><STRONG><a name="[af]"></a>Motor_RM::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_rm.o(.text._ZN8Motor_RM6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_rm.o(.rodata._ZTV8Motor_RM)
</UL>
<P><STRONG><a name="[ae]"></a>Motor_RM::update(unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_rm.o(.text._ZN8Motor_RM6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_RM::update(unsigned int) &rArr; Motor_RM::updateMotorMeasurement() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::updateMotorMeasurement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_rm.o(.rodata._ZTV8Motor_RM)
</UL>
<P><STRONG><a name="[227]"></a>Motor_RM::setParams(_Motor_RM_Params_t)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, armcontroltask.o(.text._ZN8Motor_RM9setParamsE18_Motor_RM_Params_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_RM::setParams(_Motor_RM_Params_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[263]"></a>Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, motor_rm.o(.text._ZN8Motor_RMC2ER5MotorR9CanDevicettha))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDevice::addRxLink(_CAN_Rx_Data_Pack_t*)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CAN_Rx_Data_Pack_t::_CAN_Rx_Data_Pack_t__sub_object()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Backend::Motor_Backend__sub_object(Motor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[2f2]"></a>Motor_RM::Motor_RM__sub_object(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, motor_rm.o(.text._ZN8Motor_RMC2ER5MotorR9CanDevicettha), UNUSED)

<P><STRONG><a name="[26b]"></a>CanDevice::init(__CAN_HandleTypeDef*)</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, candevice.o(.text._ZN9CanDevice4initEP19__CAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CanDevice::init(__CAN_HandleTypeDef*) &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[1e4]"></a>CanDevice::send(CAN_TxHeaderTypeDef*, unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, candevice.o(.text._ZN9CanDevice4sendEP19CAN_TxHeaderTypeDefPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanDevice::send(CAN_TxHeaderTypeDef*, unsigned char*) &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::update(unsigned int)
</UL>

<P><STRONG><a name="[27c]"></a>CanDevice::addRxLink(_CAN_Rx_Data_Pack_t*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, candevice.o(.text._ZN9CanDevice9addRxLinkEP19_CAN_Rx_Data_Pack_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanDevice::addRxLink(_CAN_Rx_Data_Pack_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
</UL>

<P><STRONG><a name="[27d]"></a>CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, candevice.o(.text._ZN9CanDevice9addTxLinkEthhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM::Motor_RM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
</UL>

<P><STRONG><a name="[271]"></a>CanDevice::CanDevice()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, candevice.o(.text._ZN9CanDeviceC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[2f3]"></a>CanDevice::CanDevice__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, candevice.o(.text._ZN9CanDeviceC2Ev), UNUSED)

<P><STRONG><a name="[235]"></a>Scheduler::startAsync(AsyncFuncBase&, unsigned int)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, refereesystemtask.o(.text._ZN9Scheduler10startAsyncER13AsyncFuncBasej))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Scheduler::startAsync(AsyncFuncBase&, unsigned int) &rArr; Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::Transmit_DMA(__UART_HandleTypeDef*, unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[15b]"></a>Scheduler::getSysTimeUs()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, scheduler.o(.text._ZN9Scheduler12getSysTimeUsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Scheduler::getSysTimeUs() &rArr; micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::startAsync(AsyncFuncBase&, unsigned int)
</UL>

<P><STRONG><a name="[206]"></a>Scheduler::registerTask(Task_Base*)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, scheduler.o(.text._ZN9Scheduler12registerTaskEP9Task_Base))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::init()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::init()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[283]"></a>Scheduler::unregisterTask(Task_Base**)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, scheduler.o(.text._ZN9Scheduler14unregisterTaskEPP9Task_Base))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Scheduler::unregisterTask(Task_Base**)
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::run()
</UL>

<P><STRONG><a name="[267]"></a>Scheduler::run()</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, scheduler.o(.text._ZN9Scheduler3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Scheduler::run() &rArr; Scheduler::unregisterTask(Task_Base**)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::unregisterTask(Task_Base**)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::run()
</UL>

<P><STRONG><a name="[26a]"></a>Scheduler::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text._ZN9Scheduler4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[270]"></a>Scheduler::Scheduler()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text._ZN9SchedulerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[2f4]"></a>Scheduler::Scheduler__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text._ZN9SchedulerC2Ev), UNUSED)

<P><STRONG><a name="[22a]"></a>Task_Base::setInterval(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, armcontroltask.o(.text._ZN9Task_Base11setIntervalEj))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[217]"></a>Task_Base::selfKill()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, songplayertask.o(.text._ZN9Task_Base8selfKillEv))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::update(unsigned int)
</UL>

<P><STRONG><a name="[1e6]"></a>Task_Base::Task_Base__sub_object(Robot&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cansendtask.o(.text._ZN9Task_BaseC2ER5Robot))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::AttitudeSolutionTask__sub_object(Robot&)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlTask::RemoteControlTask__sub_object(Robot&, unsigned int)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefereeSystemTask__sub_object(Robot&, unsigned int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::PID_GyrotempTask__sub_object(Robot&, unsigned int)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::LEDControlTask__sub_object(Robot&, unsigned int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::PIDControlTask__sub_object(Robot&, unsigned int)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::SongPlayerTask__sub_object(Robot&, unsigned short*, unsigned short, unsigned int)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::CANSendTask(Robot&, CanDevice*, unsigned short, unsigned int)
</UL>

<P><STRONG><a name="[b1]"></a>Task_Base::~Task_Base__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cansendtask.o(.text._ZN9Task_BaseD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV9Task_Base)
</UL>
<P><STRONG><a name="[67]"></a>Task_Base::~Task_Base__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pidcontroltask.o(.text._ZN9Task_BaseD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::~GimbalControlTask__deallocating()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlTask::~RemoteControlTask__deallocating()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::~ChassisControlTask__deallocating()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::~Arm_ControlTask__deallocating()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM_PSControlTask::~Motor_DM_PSControlTask__deallocating()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::~SongPlayerTask__deallocating()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::~LEDControlTask__deallocating()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::~AttitudeSolutionTask__deallocating()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::~PID_GyrotempTask__deallocating()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::~CANSendTask__deallocating()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::~PIDControlTask__deallocating()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::~RefereeSystemTask__deallocating()
</UL>
<BR>[Address Reference Count : 14]<UL><LI> chassiscontroltask.o(.rodata._ZTV18ChassisControlTask)
<LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
<LI> attitudesolutiontask.o(.rodata._ZTV16PID_GyrotempTask)
<LI> attitudesolutiontask.o(.rodata._ZTV20AttitudeSolutionTask)
<LI> songplayertask.o(.rodata._ZTV14SongPlayerTask)
<LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
<LI> ledcontroltask.o(.rodata._ZTV14LEDControlTask)
<LI> gimbalcontroltask.o(.rodata._ZTV17GimbalControlTask)
<LI> armcontroltask.o(.rodata._ZTV15Arm_ControlTask)
<LI> cansendtask.o(.rodata._ZTV9Task_Base)
<LI> cansendtask.o(.rodata._ZTV11CANSendTask)
<LI> remotecontroltask.o(.rodata._ZTV17RemoteControlTask)
<LI> motor_dm_task.o(.rodata._ZTV22Motor_DM_PSControlTask)
<LI> refereesystemtask.o(.rodata._ZTV17RefereeSystemTask)
</UL>
<P><STRONG><a name="[1dd]"></a>QuaternionT&lang;float&rang;::toRotationMatrix() const</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, mahonyahrs.o(.text._ZNK11QuaternionTIfE16toRotationMatrixEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuaternionT&lang;float&rang;::toRotationMatrix() const &rArr; Matrix3&lang;float&rang;::Matrix3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1d7]"></a>Vector3&lang;float&rang;::isZero() const</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mahonyahrs.o(.text._ZNK7Vector3IfE6isZeroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector3&lang;float&rang;::isZero() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt::isZero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[25e]"></a>Vector3&lang;float&rang;::operator/(float) const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, inertialsensor_bmi088.o(.text._ZNK7Vector3IfEdvEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector3&lang;float&rang;::operator/(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InertialSensor_BMI088::calibGyro(unsigned int)
</UL>

<P><STRONG><a name="[1ec]"></a>Vector3&lang;float&rang;::operator*(float) const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, inertialsensor_bmi088.o(.text._ZNK7Vector3IfEmlEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector3&lang;float&rang;::operator*(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::update()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::calc(float, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1f1]"></a>Vector3&lang;float&rang;::operator+(Vector3&lang;float&rang; const&) const</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, filters.o(.text._ZNK7Vector3IfEplERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector3&lang;float&rang;::operator+(Vector3&lang;float&rang; const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3__sub_object(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter&lang;Vector3&lang;float&rang; &rang;::update()
</UL>

<P><STRONG><a name="[285]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[1e7]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::~GimbalControlTask__deallocating()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlTask::~RemoteControlTask__deallocating()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::~ChassisControlTask__deallocating()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::~Arm_ControlTask__deallocating()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM_PSControlTask::~Motor_DM_PSControlTask__deallocating()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayerTask::~SongPlayerTask__deallocating()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::~LEDControlTask__deallocating()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::~AttitudeSolutionTask__deallocating()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GyrotempTask::~PID_GyrotempTask__deallocating()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::~CANSendTask__deallocating()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::~PIDControlTask__deallocating()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::~RefereeSystemTask__deallocating()
</UL>

<P><STRONG><a name="[1e1]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeSolutionTask::AttitudeSolutionTask__sub_object(Robot&)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalControlTask::GimbalControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::ChassisControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, unsigned int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::update(unsigned int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCProtocol::init()
</UL>

<P><STRONG><a name="[6d]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 5]<UL><LI> mahonyahrs.o(.rodata._ZTV4AHRS)
<LI> inertialsensor_backend.o(.rodata._ZTV22InertialSensor_Backend)
<LI> motor_backend.o(.rodata._ZTV13Motor_Backend)
<LI> rcprotocol_backend.o(.rodata._ZTV18RCProtocol_Backend)
<LI> cansendtask.o(.rodata._ZTV9Task_Base)
</UL>
<P><STRONG><a name="[286]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[241]"></a>arm_cos_f32</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
</UL>

<P><STRONG><a name="[242]"></a>arm_sin_f32</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
</UL>

<P><STRONG><a name="[ec]"></a>main</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = main &rArr; Robot::init() &rArr; Arm_ControlTask::Arm_ControlTask(Robot&, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_RM_Params_t*, _PID_Params_t*, _PID_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, _Motor_DM_Params_t*, unsigned int) &rArr; Motor_DM_PSControlTask::Motor_DM_PSControlTask(Robot&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; Motor_DM::Motor_DM(Motor&, CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::run()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[116]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[288]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[287]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[289]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[28a]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[117]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[118]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[28b]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[11a]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[28d]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1db]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1dc]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::update(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[24a]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::init()
</UL>

<P><STRONG><a name="[28f]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[291]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[290]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[28e]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[f8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[28c]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[e3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[5f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[221]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::init()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
</UL>

<P><STRONG><a name="[293]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
</UL>

<P><STRONG><a name="[296]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[29b]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[299]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2f5]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[29a]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[2f6]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2f7]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[29c]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[2f8]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[29d]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[2f9]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[1fd]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::init()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[29e]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[295]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[298]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::init()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[29f]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::init()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::update(unsigned int)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::arm_mode_switch()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefereeSystemTask::RefreshDynamicClientUI()
</UL>

<P><STRONG><a name="[2a1]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2fa]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[2a3]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2a4]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::arm_mode_switch()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[2a5]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[2a6]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisControlTask::update(unsigned int)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControlTask::breath(unsigned char, unsigned char, unsigned char, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[2a7]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ControlTask::arm_mode_switch()
</UL>

<P><STRONG><a name="[2a8]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[2a2]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[dc]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2fb]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2fc]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[294]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[be]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[c2]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b3]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[1c3]"></a>__cxx_global_var_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[131]"></a>ADC_Init</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[154]"></a>FLASH_Program_Byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[157]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(.text.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[156]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[155]"></a>FLASH_Program_Word</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[12e]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[150]"></a>FLASH_MassErase</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[14b]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[14a]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[14d]"></a>DMA_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[166]"></a>NVIC_EncodePriority</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[173]"></a>SysTick_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[164]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[165]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[167]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[168]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[172]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[1ba]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[17b]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[186]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[188]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[189]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[178]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[17a]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[60]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[63]"></a>UART_DMAError</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[61]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[62]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[19c]"></a>UART_EndRxTransfer</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[199]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>UART_EndTxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[198]"></a>UART_Receive_IT</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>UART_SetConfig</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19b]"></a>UART_Transmit_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>getCurrentMicrosTim5()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_common.o(.text._ZL20getCurrentMicrosTim5v))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros()
</UL>

<P><STRONG><a name="[2a0]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[297]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[5e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
